///////
// Sets

%s PVar  {root, x, t}
%s PVarR {root}
%s PSel  {right, left}
%s Sets  {marked, pending}

#include "predicates_set.tvp"
#include "predicates.tvp"

%%

#include "actions_assertions.tvp"
#include "actions_set.tvp"
#include "actions_shape.tvp"

%%

                                          // @Ensures marked == REACH(root)
                                          // void Mark(Node root, NodeSet marked) {
                                          //   Node x;
L1_0  IsNotNull(root)                   L1_1  //   if (root != null) {
L1_0  IsNull(root)                      L1_19 //
L1_1  SetClear(pending)                 L1_2  //     pending.clear();
L1_2  SetAdd(pending, root)             L1_3  //     pending.add(root);
L1_3  SetClear(marked)                  L1_4  //     marked.clear();
L1_4  SetNotIsEmpty(pending)            L1_5  //     while (!pending.isEmpty()) {
L1_4  SetIsEmpty(pending)               L1_19
L1_5  SetSelectAndRemove(pending, x)    L1_6  //       x = pending.selectAndRemove();

L1_6  SetAdd(marked, x)                 L1_7  //       marked.add(x);
L1_7  AssignFieldSelect(t, x, left)     L1_8  //       t = x.left;
L1_8  IsNotNull(t)                      L1_9  //       if (t != null) {
L1_8  IsNull(t)                         L1_12
L1_9  SetNotContains(marked, t)         L1_11 //         if (!marked.contains(t)) {
L1_9  SetContains(marked, t)            L1_12
L1_11 SetAdd(pending, t)                L1_12 //           pending.add(t)
                                          //         }
                                          //       }
L1_12 AssignNull(t)                     L1_13 //       t = null;
L1_13 AssignFieldSelect(t, x, right)    L1_15 //       t = x.right;
L1_15 IsNotNull(t)                      L1_16 //       if (t != null) {
L1_15 IsNull(t)                         L1_18
L1_16 SetNotContains(marked, t)         L1_17 //         if (!marked.contains(t)) {
L1_16 SetContains(marked, t)            L1_18
L1_17 SetAdd(pending, t)                L1_18 //           pending.add(t)
                                          //         }
                                          //       }
L1_18 AssignNull(t)                     L1_4  //       t = null;
                                          //    }
L1_19 SetNotEqualReachset(marked, root) error
                                          //    if (marked.SetNotEqualReachset(root)) {
                                          //      System.err.println("Internal error: mark phase of gc")
                                          //    }
L1_19 SetEqualReachset(marked, root)    exit
                                          //   }
                                          // }

%%

/////////////////////////////////////////////////////////////////////////
// Display only structures that arise at the following program locations.
L1_0, exit, error
