///////
// Sets

%s PVar {root, x, t}
%s PVarR {root}
%s PSel {right, left}
%s Sets{marked, pending, unexplored, collected}

#include "predicates_set.tvp"
#include "predicates.tvp"

%%

#include "actions_assertions.tvp"
#include "actions_set.tvp"
#include "actions_shape.tvp"

%%
                                           // void MarkAndSweep(Node root) {
// Mark phase -----------------------------------------------------------------------
L1_0  IsNotNull(root)                   L1_1   //   if (root != null) {
L1_0  IsNull(root)                      L1_19  //
L1_1  SetClear(pending)                 L1_2   //     pending.clear();
L1_2  SetAdd(pending, root)             L1_3   //     pending.add(root);
L1_3  SetClear(marked)                  L1_4   //     marked.clear();
L1_4  SetNotIsEmpty(pending)            L1_5   //     while (!pending.isEmpty()) {
L1_4  SetIsEmpty(pending)               L1_6
L1_5  SetSelectAndRemove(pending, x)    L1_7   //       x = pending.selectAndRemove();
L1_7  SetAdd(marked, x)                 L1_8   //       marked.add(x);

L1_8  AssignFieldSelect(t, x, left)     L1_9   //       t = x.left;
L1_9  IsNotNull(t)                      L1_10  //       if (t != null) {
L1_9  IsNull(t)                         L1_13
L1_10 SetNotContains(marked, t)         L1_12  //         if (!marked.contains(t)) {
L1_10 SetContains(marked, t)            L1_13
L1_12 SetAdd(pending, t)                L1_13  //           pending.add(t)
                                           //         }
                                           //       }
L1_13 AssignNull(t)                     L1_13_5 //      t = null;
L1_13_5 AssignFieldSelect(t, x, right)  L1_14  //       t = x.right;
L1_14 AssignNull(x)                     L1_14_5 //      x = null;
L1_14_5 IsNotNull(t)                    L1_15   //      if (t != null) {
L1_14_5 IsNull(t)                       L1_18
L1_15 SetNotContains(marked, t)         L1_17   //        if (!marked.contains(t)) {
L1_15 SetContains(marked, t)            L1_18
L1_17 SetAdd(pending, t)                L1_18   //          pending.add(t)
                                            //        }
                                            //      }
L1_18 AssignNull(t)                     L1_4    //      t = null;
                                            //    }
L1_6 AssignNull(x)                      L1_19   //    x = null;
L1_19 SetNotEqualReachset(marked, root) L1_error
                                            //    if (marked.setNotEqualReachset(root)) {
                                            //      System.err.println("Internal error: mark phase of gc")
                                            //  }
L1_19 SetEqualReachset(marked, root)    L1_30

// Sweep phase -----------------------------------------------------------------------
L1_30 SetAssignUniverse(unexplored)     L1_31   //  unexplored.assignUniverse();
L1_31 SetClear(collected)               L1_32   //  collected.clear();
L1_32 SetNotIsEmpty(unexplored)         L1_33   //  while (!unexplored.isEmpty()) {
L1_32 SetIsEmpty(unexplored)            L1_37
L1_33 SetSelectAndRemove(unexplored, x) L1_34   //    x = unexplored.selectAndRemove();
 
L1_34 SetNotContains(marked, x)         L1_35   //    if (!marked.contains(x)) {
L1_34 SetContains(marked, x)            L1_36
L1_35 SetAdd(collected, x)              L1_36  //       collected.add(x)
                                           //     }
L1_36 AssignNull(x)                     L1_32  //     x = null;
                                           //   }
L1_37 SetNotEqualComplementOfReachset(collected, root) error
                                           //   if (collected.SetNotEqualComplementOfReachset(root)) {
                                           //     System.err.println("Internal error: sweep phase of gc")
                                           //   }
L1_37 SetEqualComplementOfReachset(collected, root)    L1_exit
                                           // }

%%

/////////////////////////////////////////////////////////////////////////
// Display only structures that arise at the following program locations.
L1_0, L1_30, L1_exit, L1_error