%action uninterpreted() { 
  %t "uninterpreted"
}

%action skip() { 
  %t "skip"
}


///////////////////////////////////////////////////////////////////////////
// Actions for statements manipulating pointer variables and pointer fields

%action Set_Null_L(lhs) {
  %t lhs + " = NULL"
  {
    lhs(v) = 0
  }
}

%action Copy_Var_L(lhs, rhs) {
  %t lhs + " = " + rhs
  %f { rhs(v) } 
  {
    lhs(v) = rhs(v) 
  }
}

%action Malloc_L(lhs) {
  %t lhs + " = (L) malloc(sizeof(struct node)) "
  %new
  {
    lhs(v) = isNew(v)
    t[n](v_1, v_2) = (isNew(v_1) ? v_1 == v_2 : t[n](v_1, v_2))
    r[n, lhs](v) = isNew(v)
    foreach(z in PVar-{lhs}) {
      r[n,z](v) = r[n,z](v)
    }
    is[n](v) = is[n](v)
  }
}

%action Free_L(lhs) {
  %t "free(" + lhs + ")"
  %f { lhs(v) }
  %message (E(v, v_1) lhs(v) & n(v, v_1)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  {
    t[n](v_1, v_2) = t[n](v_1, v_2)
    foreach(z in PVar) {
      r[n,z](v) = r[n,z](v)
    }
    is[n](v) = is[n](v)  
  }
  %retain !lhs(v)
}

%action Get_Next_L(lhs, rhs) {
  %t lhs + " = " + rhs + "->" + n
  %f { E(v_1, v_2) rhs(v_1) & n(v_1, v_2) &  t[n](v_2, v) }
  %message (!E(v) rhs(v)) ->
           "Illegal dereference to\n" + n + " component of " + rhs
  {
    lhs(v) = E(v_1) rhs(v_1) & n(v_1, v)
  }
}

%action Set_Next_Null_L(lhs) {
  %t lhs + "->" + n + " = NULL"
  %f { 
       lhs(v),
       // optimized change-formula for t[n] update-formula
       E(v_1, v_2) lhs(v_1) & n(v_1, v_2) & t[n](v_2, v)   
     }
  %message (!E(v) lhs(v)) -> "Illegal dereference to\n" +
                             n + " component of " + lhs

  {
    n(v_1, v_2) = n(v_1, v_2) & !lhs(v_1)
  }
}

%action Set_Next_L(lhs, rhs) {
  %t lhs + "->" + n + " = " + rhs
  %f {
       lhs(v), rhs(v),
       // optimized change-formula for t[n] upate-formula
       E(v_4) rhs(v_4) & t[n](v_4, v_2)
     }
  %message (E(v_1, v_2) lhs(v_1) & n(v_1, v_2)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  %message (E(v_1, v_2) lhs(v_1) & rhs(v_2) & t[n](v_2, v_1)) -> 
           "A cycle may be introduced\nby assignment " + lhs + "->" + n + "=" + rhs
  {
    n(v_1, v_2) = n(v_1, v_2) | lhs(v_1) & rhs(v_2)
  }
}

//////////////////////////////////////////////////////////////////
// Actions needed to simulate program conditions involving pointer
// equality tests.

%action Is_Not_Null_Var(lhs) {
  %t lhs + " != NULL"
  %f { lhs(v) } 
  %p E(v) lhs(v)
}

%action Is_Null_Var(lhs) {
  %t lhs + " == NULL"
  %f { lhs(v) } 
  %p !(E(v) lhs(v))
}

%action Is_Eq_Var(lhs, rhs) {
  %t lhs + " == " + rhs
  %f { lhs(v), rhs(v) } 
  %p A(v) lhs(v) <-> rhs(v)
}

%action Is_Not_Eq_Var(lhs, rhs) {
  %t lhs + " != " + rhs
  %f { lhs(v), rhs(v) } 
  %p !A(v) lhs(v) <-> rhs(v)
}


/////////////////////////////////////////
// Actions for testing various properties

%action Assert_ListInvariants(lhs) {
  %t "assertListInvariants(" + lhs + ")"
  %f { lhs(v) }
  %p E(v) r[n,lhs](v) & is[n](v)
  %message ( E(v) r[n,lhs](v) & is[n](v) ) -> 
           "The list pointed by " + lhs + " may be shared!"
}

%action Assert_No_Leak(lhs) {
  %t "assertNoLeak(" + lhs + ")"
  %f { lhs(v) }
  %p E(v) !r[n,lhs](v)
  %message ( E(v) !r[n,lhs](v) ) -> 
           "There may be a list element not reachable from variable " + lhs + "!"
}

//=============================== Colored list actions ===============================

////////////// Actions for manipulating booleans

%action Set_False_L(lhs) {
  %t lhs + " = false"
  {
    lhs() = 0
  }
}

%action Is_True_Var(lhs) {
  %t lhs + " == true"
  %p lhs()
}

%action Is_False_Var(lhs) {
  %t lhs + " == false"
  %p !lhs()
}

////////////// Actions for manipulating colors

%action Get_Color_L(lhs, rhs) {
  %t lhs + " = " + rhs + "->" + color
  %f { rhs(v) & color(v) }
  %message (!E(v) rhs(v)) ->
           "Illegal dereference to\n" + color + " component of " + rhs
  {
    lhs() = E(v) rhs(v) & color(v)
  }
}

// taking a snapshot of the inital color of each element in the list
%action Set_Old_Colors() {
  %t "Set_Old_Colors()"
  %f { color(v) }
  {
    old_color(v) = color(v)
  }
}

%action Set_Old_n() {
  %t "Set_Old_n()"
  {
    old_n(v) = E(w) n(v,w)
  }
}

// flipping the color of the element pointed by lhs. for all other elements, the action preserves its current color.
%action Flip_Color_L(lhs) {
  %t lhs + "->" + color + " = " + "!" + lhs + "->" + color
  %f { lhs(v) & color(v) }
  %message (!E(v) lhs(v)) ->
          "Illegal dereference to\n" + color + " component of " + lhs
  {
    color(v) = (lhs(v) ? !color(v) : color(v)) 
  }
}

////////////// Actions for testing various properties

// assert that the order of the list is the same as the original order
%action Assert_Same_Order(lhs) {
  %t "Assert_Same_Order(" + lhs + ")"
  %p !A(v_1,v_2) (n(v_1,v_2) <-> old_n(v_1,v_2))
  %message (!A(v_1,v_2) (n(v_1,v_2) <-> old_n(v_1,v_2))) -> 
           "The order of the list point by " + lhs + " should be the same as the input list"
}

// assert that the colors in the list alternate.
%action Assert_Alternating_Colors(lhs) {
  %t "Assert_Alternating_Colors(" + lhs + ")"
  %f { lhs(v) }
  %p !A(v) r[n,lhs](v) -> altlist[n](v)
  %message (!A(v) r[n,lhs](v) -> altlist[n](v)) -> 
           "The list pointed by " + lhs + " may not be an alternating list"
}

// assert the following: if the last_color = 1 then the color of each element should be the same as input list.
//                       otherwise, the current colors should be negated with respect to the input list.
// note: last_color is the color of the last element in the input list. 
%action Assert_Flipped(lhs) {
  %t "Assert_Flipped(" + lhs + ")"
  %f { lhs(v) }
  %p (last_color() & !A(v) r[n,lhs](v) -> (color(v) <-> old_color(v))) | (!last_color() & !A(v) r[n,lhs](v) -> (color(v) <-> !old_color(v)))
  %message (last_color() & !A(v) r[n,lhs](v) -> (color(v) <-> old_color(v))) ->
          "The colors of the list pointed by " + lhs + " should be negated with respect to the input list"
  %message (!last_color() & !A(v) r[n,lhs](v) -> (color(v) <-> !old_color(v))) ->
          "The colors of the list pointed by " + lhs + " should be the same as the input list"
}
