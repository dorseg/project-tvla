/*
Eli Simhayev - 2017
*/

///////
// Sets

%s PVar {p, x, e} // Names of pointer variables.
%s Hvar {x}       // Names of pointer variables used for taking heap snapshots.

#include "eli_predicates.tvp"

%%

#include "eli_actions.tvp"

%%

///////////////////////////////////////////////////////////////////////////////
// Transition system for a function that flips a singly-linked list.
// If the last node in the input list has the color 'false' then the color
// of the output list are negated with respect to the input list, and otherwise they
// are the same as in the input list.

                            
Ls0 Copy_Reach_L(x)		Ls1   // Take a snapshot of the heap to later         
                              // verify that the output list is a permutation 
                              // of the list pointed by x. 

Ls1 Copy_Color_L()		L1    // Take a snapshot of the colors to later 
							  // verify the alternating color property.

//  get last
L1  Copy_Var_L(e,x)     L2   // e = x;  
L2  Set_Null_L(p)       L3   // p = NULL;
L3  Is_Null_Var(e)      L6   // while (e != NULL) {
L3  Is_Not_Null_Var(e)  L4
L4  Copy_Var_L(p, e)    L5   //   p = e;
L5  Get_Next_L(e, e)    L3   //   e = e->n;
                             // }

// last node pointed by variable p  
L6  Is_Color_True(p)    	exit // if (p->color == true) return;
L6  Is_Color_False(p)  		L7
L7  Copy_Var_L(e,x)     	L8   // e = x;  
L8  Is_Null_Var(e)      	exit // while (e != NULL) {
L8  Is_Not_Null_Var(e)  	L9
L9  Is_Color_True(e) 		L10  //    if(e->color == true) goto L10;
L9 	Is_Color_False(e)		L11  //	   if(e->color == false) goto L11;   		
L10 Set_Color_False(e)		L12	 //	   L10: e->color = false;	
L11 Set_Color_True(e)		L12  //	   L11: e->color = true;
L12 Get_Next_L(e, e)    	L8   //    e = e->n;
                             	 // }               

exit Assert_ListInvariants(x)	 exit2 	
exit Assert_No_Leak(x)        	 exit2 	
exit Assert_Flip(x)   			 exit2 

