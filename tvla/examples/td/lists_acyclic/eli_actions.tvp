/*
Eli Simhayev - 2017
*/

%action uninterpreted() { 
  %t "uninterpreted"
}

%action skip() { 
  %t "skip"
}


///////////////////////////////////////////////////////////////////////////
// Actions for statements manipulating pointer variables and pointer fields

%action Set_Null_L(lhs) {
  %t lhs + " = NULL" 
  {
    lhs(v) = 0
  }
}

%action Copy_Var_L(lhs, rhs) {
  %t lhs + " = " + rhs
  %f { rhs(v) } 
  {
    lhs(v) = rhs(v) 
  }
}

%action Malloc_L(lhs) {
  %t lhs + " = (L) malloc(sizeof(struct node)) "
  %new
  {
    lhs(v) = isNew(v)
    t[n](v_1, v_2) = (isNew(v_1) ? v_1 == v_2 : t[n](v_1, v_2))
    r[n, lhs](v) = isNew(v)
    foreach(z in PVar-{lhs}) {
      r[n,z](v) = r[n,z](v)
    }
    is[n](v) = is[n](v)
  }
}

%action Free_L(lhs) {
  %t "free(" + lhs + ")"
  %f { lhs(v) }
  %message (E(v, v_1) lhs(v) & n(v, v_1)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  {
    t[n](v_1, v_2) = t[n](v_1, v_2)
    foreach(z in PVar) {
      r[n,z](v) = r[n,z](v)
    }
    is[n](v) = is[n](v)  
  }
  %retain !lhs(v)
}

%action Get_Next_L(lhs, rhs) {
  %t lhs + " = " + rhs + "->" + n
  %f { E(v_1, v_2) rhs(v_1) & n(v_1, v_2) &  t[n](v_2, v) }
  %message (!E(v) rhs(v)) ->
           "Illegal dereference to\n" + n + " component of " + rhs
  {
    lhs(v) = E(v_1) rhs(v_1) & n(v_1, v)
  }
}

%action Set_Next_Null_L(lhs) {
  %t lhs + "->" + n + " = NULL"
  %f { 
       lhs(v),
       // optimized change-formula for t[n] update-formula
       E(v_1, v_2) lhs(v_1) & n(v_1, v_2) & t[n](v_2, v)   
     }
  %message (!E(v) lhs(v)) -> "Illegal dereference to\n" +
                             n + " component of " + lhs

  {
    n(v_1, v_2) = n(v_1, v_2) & !lhs(v_1)
  }
}

%action Set_Next_L(lhs, rhs) {
  %t lhs + "->" + n + " = " + rhs
  %f {
       lhs(v), rhs(v),
       // optimized change-formula for t[n] upate-formula
       E(v_4) rhs(v_4) & t[n](v_4, v_2)
     }
  %message (E(v_1, v_2) lhs(v_1) & n(v_1, v_2)) ->
           "Internal Error! " + lhs + "->" + n + " != NULL"
  %message (E(v_1, v_2) lhs(v_1) & rhs(v_2) & t[n](v_2, v_1)) -> 
           "A cycle may be introduced\nby assignment " + lhs + "->" + n + "=" + rhs
  {
    n(v_1, v_2) = n(v_1, v_2) | lhs(v_1) & rhs(v_2)
  }
}

///////////////////////////////////////////////////////////////////////////
// Actions needed to simulate program conditions involving pointer
// equality tests.

%action Is_Not_Null_Var(lhs) {
  %t lhs + " != NULL"
  %f { lhs(v) } 
  %p E(v) lhs(v)
}

%action Is_Null_Var(lhs) {
  %t lhs + " == NULL"
  %f { lhs(v) } 
  %p !(E(v) lhs(v))
}

%action Is_Eq_Var(lhs, rhs) {
  %t lhs + " == " + rhs
  %f { lhs(v), rhs(v) } 
  %p A(v) lhs(v) <-> rhs(v)
}

%action Is_Not_Eq_Var(lhs, rhs) {
  %t lhs + " != " + rhs
  %f { lhs(v), rhs(v) } 
  %p !A(v) lhs(v) <-> rhs(v)
}


///////////////////////////////////////////////////////////////////////////
// Actions related to color data field of a node.

// if (lhs->color == true)
%action Is_Color_True(lhs) {
  %t lhs + "->color =? true"
  %f { lhs(v) & color(v) }
  %p E(v) (lhs(v) & color(v))    
}

// if (lhs->color == false)
%action Is_Color_False(lhs) {
  %t lhs + "->color =? false"
  %f { lhs(v) & color(v) }
  %p E(v) (lhs(v) & !color(v))    
}

// lhs->color = true
%action Set_Color_True(lhs) {
  %t lhs + "->color = true"
  %f { lhs(v) }
  %message  (!E(v) lhs(v)) ->
            "Illegal dereference to\n" + n + " component of " + lhs
  {
    // if v is the desired node than color = 1. otherwise, color unchanged.
    color(v) = (lhs(v) ? 1 : color(v)) 
  }
}

// lhs->color = false
%action Set_Color_False(lhs) {
  %t lhs + "->color = false"
  %f { lhs(v) }
  %message  (!E(v) lhs(v)) ->
            "Illegal dereference to\n" + n + " component of " + lhs
  {
    // if v is the desired node than color = 0. otherwise, color unchanged.
    color(v) = (lhs(v) ? 0 : color(v)) 
  }
}

///////////////////////////////////////////////////////////////////////////
// Specialized snapshot actions

%action Copy_Reach_L(lhs) {
  %t "storeReach(" + lhs + ")"
  {
    old_r[n,lhs](v) = r[n,lhs](v)
  }
}

%action Copy_Color_L() {
  %t "storeColor()"
  %f { color(v) }
  {
    old_color(v) = color(v)
  }
}

///////////////////////////////////////////////////////////////////////////
// Actions for testing various properties

%action Assert_ListInvariants(lhs) {
  %t "assertListInvariants(" + lhs + ")"
  %f { lhs(v) }
  %p E(v) r[n,lhs](v) & is[n](v)
  %message ( E(v) r[n,lhs](v) & is[n](v) ) -> 
           "The list pointed by " + lhs + " may be shared!"
}

%action Assert_No_Leak(lhs) {
  %t "assertNoLeak(" + lhs + ")"
  %f { lhs(v) }
  %p E(v) !r[n,lhs](v)
  %message ( E(v) !r[n,lhs](v) ) -> 
           "There may be a list element not reachable from variable " + lhs + "!"
}


///////////////////////////////////////////////////////////////////////////
// Actions related to assertions about the relation of colors 
// in the output list and the input list.
// (verify the correctness of 'flip' method). 

%action Assert_Flip(lhs) {
  %t "Assert_Flip(" + lhs + ")"
  %f { lhs(v) }

  // 1. Each node that was reachable from head in the input list, 
  //    is reachable from head in the output list.
  %message ( !A(v) (r[n,lhs](v) <-> old_r[n,lhs](v)) ) -> 
           "Reachability in the output list does not hold."

  // 2. The list has alternating colors.       
  %message ( !A(v) (r[n,lhs](v) -> alter[n](v)) ) ->
            "Alternating list property does not hold." 

  // 3. "flip" assertions according to the last color. 
  //     colors of the output list are negated with respect to the input list if false,
  //     and otherwise they are the same as in the input list
  %message ( !last_color() <-> negated_colors() ) ->
            "Last color is FALSE but the colors are not negated."           
  %message ( last_color() <-> same_colors() ) ->
            "Last color is TRUE but the colors are not the same."          
}
