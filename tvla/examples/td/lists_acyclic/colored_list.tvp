///////
// Sets

%s PVar {x, e, p}
%p c()  // Represents a boolean variable.

#include "predicate_colored_lists.tvp"

%%

#include "actions_colored_lists.tvp"

%%

///////////////////////////////////////////////////////////////////////
// x is the head of list

// finding the color (variable c) of the last element of in the list.
// p represents the last node in the list.
L0_0 Set_Old_Colors()  L0_1 // capturing the original colors
L0_1 Set_Old_r(x)	   L1   // capturing the original reachability
L1 Copy_Var_L(e,x)     L2   // e = x;  
L2 Set_False_L(c)      L3   // c = false;
L3 Is_Null_Var(e)      L6   // while (e != NULL) {
L3 Is_Not_Null_Var(e)  L4
L4 Copy_Var_L(p,e)	   L5   //   p = e;
L5 Get_Next_L(e,e)     L3   //   e = e->n;
                            // }
// p now points to the last element
L6 Get_Color_L(c,p)    L7   //  c = p->color;
L7 Is_True_Var(c)	   exit //  if(!c)
L7 Is_False_Var(c)	   L8

// c=false ==> flipping the colors of the list.
L8 Copy_Var_L(e,x)     L9    // e = x;  
L9 Is_Null_Var(e)      exit  // while (e != NULL) {
L9 Is_Not_Null_Var(e)  L10
L10 Flip_Color_L(e)    L11   //   e->color = !e->color;
L11 Get_Next_L(e,e)    L9    //   e = e->n;
                             // }

exit Assert_ListInvariants(x)     error
exit Assert_No_Leak(x)            error
exit Assert_Same_Order(x)         error
exit Assert_Alternating_Colors(x) error
exit Assert_Flipped(x)		  	  error
